<?xml version="1.0" encoding="UTF-8"?>
<project name="ldap-connector" default="build" basedir=".">

  <!-- ========================= PROPERTIES ============================= -->
  <property file="${user.home}/google-enterprise-connector-ldap.properties" />
  <property file="version.properties" />

  <property name="COMPILE_DEBUG_FLAG" value="true" />
  <property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />

  <property name="build.dir" value="build" />
  <property name="build-prod.dir" value="${build.dir}/prod" />
  <property name="build-prod-config.dir" value="${build-prod.dir}/config" />
  <property name="build-tests.dir" value="${build.dir}/tests" />

  <property name="classes-prod.dir" value="${build-prod.dir}/classes" />
  <property name="classes-tests.dir" value="${build-tests.dir}/classes" />

  <!-- <property name="filesystem-project.dir" value="../file-system-connector" /> -->

  <property name="thirdparty-prod-jar.dir" value="${filesystem-project.dir}/third_party/prod" />
  <property name="thirdparty-test-jar.dir" value="${filesystem-project.dir}/third_party/test" />

  <property name="connector-manager.dir"
            location="${connector-manager-projects.dir}/connector-manager" />
  <property name="spi.jar.dir" value="${connector-manager.dir}/dist/jarfile" />
  <property name="connector-manager-thirdparty-jar.dir"
    location="${connector-manager-projects.dir}/connector-manager/third-party" />
  <property name="connector-manager-thirdparty-tests-jar.dir"
    location="${connector-manager-thirdparty-jar.dir}/tests" />

  <property name="file-system-connector.dir"
            location="${file-system-connector-projects.dir}/file-system-connector" />
  <property name="fc.jar.dir" value="${file-system-connector.dir}/build/prod/jar" />

  <property name="config.dir" value="config" />

  <property name="src-prod.dir" value="source/java" />
  <property name="src-tests.dir" value="source/javatests" />

  <property name="jar-prod.dir" value="${build-prod.dir}/jar" />
  <property name="jar-prod.file" value="${jar-prod.dir}/connector-ldap.jar" />

  <property name="jar-tests.dir" value="${build-tests.dir}/jar" />
  <property name="jar-tests.file" value="${jar-tests.dir}/connector-ldap-tests.jar" />

  <property name="zip.dir" value  = "${build.dir}/file" />
  <property name="config-zip.dir" value  = "${zip.dir}/Config" />
  <property name="lib-zip.dir" value  = "${zip.dir}/Lib" />

  <!--Cobertura properties -->

  <property file="${config.dir}/build_code_coverage.properties" />
  <path id="cobertura.classpath">
    <fileset dir="${thirdparty-prod-jar.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>


  <target name="build" depends="init,compile_prod,jar_prod" />

  <target name="init">
    <tstamp />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build-prod.dir}" />
    <mkdir dir="${build-prod-config.dir}" />
    <mkdir dir="${jar-prod.dir}" />
    <mkdir dir="${classes-prod.dir}" />
    <mkdir dir="${classes-tests.dir}" />
    <mkdir dir="${jar-tests.dir}" />
    <mkdir dir="${tests_out.dir}" />
  </target>

  <target name="compile_prod" depends="init">
    <!-- compile java source files -->
    <javac srcdir="${src-prod.dir}" destdir="${classes-prod.dir}"
           debug="${COMPILE_DEBUG_FLAG}"
           debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="1.5" source="1.5">
      <classpath>
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${fc.jar.dir}" includes="**/*.jar" />
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
      </classpath>
    </javac>
  </target>

  <target name="jar_prod" description="Build ${jar-prod.file}"
          depends="compile_prod">
    <jar jarfile="${jar-prod.file}">
      <fileset dir="${classes-prod.dir}"/>
      <fileset dir="source/java" includes="**/*.properties"/>
      <fileset dir="${config.dir}/prod/config/.." includes="config/*.xml"/>
      <manifest>
        <attribute name="Implementation-Title" value="LDAP Connector"/>
        <attribute name="Implementation-Version" value="${version} (${TODAY}"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Specification-Title" value="Connector Manager SPI"/>
        <attribute name="Specification-Version" value="${version.spi}"/>
        <attribute name="Specification-Vendor" value="Google Inc."/>
        <attribute name="Main-Class"
                   value="com.google.enterprise.connector.ldap.ConnectorMain" />
      </manifest>
    </jar>
  </target>

  <target name="compile_tests" depends="init,jar_prod">
    <!-- compile java source files for tests -->
    <javac srcdir="${src-tests.dir}" destdir="${classes-tests.dir}"
           debug="${COMPILE_DEBUG_FLAG}"
           debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="1.5" source="1.5">
      <classpath>
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${fc.jar.dir}" includes="**/*.jar" />
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
        <fileset file="${jar-prod.file}" />
        <fileset dir="${connector-manager-thirdparty-tests-jar.dir}">
          <include name="**/junit.jar" />
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="jar_tests" description="Build ${jar-tests.file}"
          depends="compile_tests">
    <jar jarfile="${jar-tests.file}">
      <fileset dir="${classes-tests.dir}"/>
      <fileset dir="${classes-prod.dir}"/>
      <fileset dir="source/java" includes="**/*.properties"/>
      <fileset dir="${config.dir}/tests/config/.." includes="config/*.xml"/>
      <manifest>
        <attribute name="Implementation-Title" value="LDAP Connector"/>
        <attribute name="Implementation-Version" value="${version} (${TODAY}"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Specification-Title" value="Connector Manager SPI"/>
        <attribute name="Specification-Version" value="${version.spi}"/>
        <attribute name="Specification-Vendor" value="Google Inc."/>
        <attribute name="Main-Class"
                   value="com.google.enterprise.connector.ldap.ConnectorMain" />
      </manifest>
    </jar>
  </target>

  <target name="run_tests" depends="compile_tests,jar_prod,instrument">
    <mkdir dir="${classes-tests.dir}/com/google/enterprise/connector/ldap/config"/>

    <copy todir="${classes-tests.dir}/com/google/enterprise/connector/ldap/config" >
      <fileset dir="${config.dir}" />
    </copy>

    <junit printsummary="yes" haltonfailure="yes">
      <assertions><enable/></assertions>
      <!--
          The instrumented classes reference classes used by the
          Cobertura runtime, so Cobertura and its dependencies
          must be on your classpath.
      -->
      <classpath location="${instrumented.dir}" />
      <classpath refid="cobertura.classpath" />

      <classpath>
        <pathelement location="${classes-tests.dir}" />
        <fileset dir="${connector-manager-thirdparty-jar.dir}">
          <include name="**/spring.jar" />
          <include name="**/commons-logging.jar" />
        </fileset>
        <fileset dir="${connector-manager-thirdparty-tests-jar.dir}">
          <include name="**/junit.jar" />
        </fileset>
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
        <pathelement location="${jar-prod.file}" />
      </classpath>
      <formatter type="xml" />
      <test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
      <batchtest todir="${reports.xml.dir}" unless="testcase">
        <fileset dir="${test.dir}">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>

      <formatter type="brief" usefile="no"/>
      <formatter type="plain" />
      <batchtest fork="yes" todir="${tests_out.dir}">
        <fileset dir="${src-tests.dir}">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${reports.xml.dir}">
      <fileset dir="${reports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.html.dir}" />
    </junitreport>

  </target>

  <target name="clean" description="Deletes all build files.">
    <delete dir="${build.dir}" />
  </target>

  <!-- Cobertura Tasks -->

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="init_code_coverage">
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${instrumented.dir}" />
    <mkdir dir="${reports.xml.dir}" />
    <mkdir dir="${reports.html.dir}" />
    <mkdir dir="${coverage.xml.dir}" />
    <mkdir dir="${coverage.summaryxml.dir}" />
    <mkdir dir="${coverage.html.dir}" />
  </target>


  <target name="compile_code_coverage" depends="init_code_coverage">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true">
      <classpath>
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
      </classpath>
    </javac>
    <javac srcdir="${test.dir}" destdir="${classes.dir}" debug="true">
      <classpath>
        <fileset dir="${spi.jar.dir}" includes="**/*.jar" />
        <fileset dir="${thirdparty-prod-jar.dir}" includes="**/*.jar" />
      </classpath>
    </javac>
  </target>

  <target name="instrument" depends="compile_code_coverage">
    <!--
        Remove the coverage data file and any old instrumentation.
    -->
    <delete file="cobertura.ser"/>
    <!-- <delete dir="${instrumented.dir}" /> -->

    <cobertura-instrument todir="${instrumented.dir}">
      <!--
          The following line causes instrument to ignore any
          source line containing a reference to log4j, for the
          purposes of coverage reporting.
      -->
      <ignore regex="org.apache.log4j.*" />

      <fileset dir="${classes.dir}">
        <!--
            Instrument all the application classes, but
            don't instrument the test classes.
        -->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="coverage-report">
    <!--
        Generate an XML file containing the coverage data using
        the "srcdir" attribute.
    -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
  </target>

  <target name="alternate-coverage-report">
    <!--
        Generate a series of HTML files containing the coverage
        data in a user-readable form using nested source filesets.
    -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>


  <target name="clean_code_coverage"
          description="Remove all files created by the build/test process.">
    <delete dir="${classes.dir}" />
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>


  <target name="run_code_coverage" depends="run_tests,coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

</project>
